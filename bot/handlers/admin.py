import asyncio
import csv
from datetime import datetime
import io
from logging import Logger
from typing import Optional

from aiogram import Bot, F, Router
from aiogram.dispatcher.event.bases import UNHANDLED
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    BufferedInputFile,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from filters import IsAdminFilter
from keyboards import ToMainMenuKeyboard
from models import Order
from service import OrderService, UserService

router = Router()
router.message.filter(IsAdminFilter())


class AdminStates(StatesGroup):
    viewing_orders = State()
    order_details = State()


ORDERS_PER_PAGE = 5


@router.message(F.text == "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def show_admin_panel(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await state.clear()

    text = "üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>"
    await message.answer(text, reply_markup=ToMainMenuKeyboard()())

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data="admin_new_orders")],
            [InlineKeyboardButton(text="üìù –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_all_orders")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")],
        ],
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@router.callback_query(F.data == "admin_panel")
async def admin_panel_callback(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await state.clear()

    text = "üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>"
    await callback.message.answer(text, reply_markup=ToMainMenuKeyboard()())  # type: ignore

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data="admin_new_orders")],
            [InlineKeyboardButton(text="üìù –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_all_orders")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")],
        ],
    )

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)  # type: ignore
    await callback.answer()


@router.callback_query(F.data == "admin_new_orders")
async def show_new_orders(callback: CallbackQuery, state: FSMContext, order_service: OrderService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ (—Å—Ç–∞—Ç—É—Å pending)"""
    await state.set_state(AdminStates.viewing_orders)
    await state.update_data(filter_status="pending", page=0)

    await show_orders_page(callback, state, order_service, status_filter="pending")


@router.callback_query(F.data == "admin_all_orders")
async def show_all_orders(callback: CallbackQuery, state: FSMContext, order_service: OrderService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏"""
    await state.set_state(AdminStates.viewing_orders)
    await state.update_data(filter_status=None, page=0)

    await show_orders_page(callback, state, order_service)


async def show_orders_page(
    callback: CallbackQuery,
    state: FSMContext,
    order_service: OrderService,
    status_filter: Optional[str] = None,
    page: int = 0,
    delete_message: bool = True,
):
    if delete_message:
        await callback.message.delete()  # type: ignore
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞—è–≤–∫–∞–º–∏"""
    if status_filter == "pending":
        orders = await order_service.get_pending()
        title = "üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"
    else:
        orders = await order_service.get(with_author=True)
        title = "üìù –í—Å–µ –∑–∞—è–≤–∫–∏"

    if not orders:
        text = f"{title}\n\n‚ùå –ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]],
        )
        await callback.message.answer(text, reply_markup=keyboard)  # type: ignore
        await callback.answer()
        return UNHANDLED

    total_orders = len(orders)
    total_pages = (total_orders + ORDERS_PER_PAGE - 1) // ORDERS_PER_PAGE
    start_idx = page * ORDERS_PER_PAGE
    end_idx = min(start_idx + ORDERS_PER_PAGE, total_orders)
    page_orders = orders[start_idx:end_idx]

    text = f"{title}\n\n"

    for i, order in enumerate(page_orders, start=start_idx + 1):
        status_emoji = get_status_emoji(order.status.value)
        date_str = order.time.strftime("%d.%m.%Y %H:%M")

        author_info = f"ID: {order.author_id}"
        if hasattr(order, "author") and order.author:
            if order.author.username:
                author_info += f" (@{order.author.username})"
            if order.author.phone_number:
                author_info += f"\nüì± {order.author.phone_number}"

        text += (
            f"<b>{i}. –ó–∞–∫–∞–∑ #{order.id}</b> {status_emoji}\n"
            f"üë§ {author_info}\n"
            f"üìç {order.address[:50]}{'...' if len(order.address) > 50 else ''}\n"
            f"üìÖ {date_str}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {get_status_text(order.status.value)}\n\n"
        )

    keyboard = []

    for _, order in enumerate(page_orders, start=start_idx):
        keyboard.append([InlineKeyboardButton(text=f"üìã –ó–∞–∫–∞–∑ #{order.id}", callback_data=f"admin_order_{order.id}")])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥.", callback_data=f"admin_page_{page-1}"))

    nav_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="ignore"))

    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥. ‚ñ∂Ô∏è", callback_data=f"admin_page_{page+1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    keyboard.append(
        [
            InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data=f"admin_export_{status_filter or 'all'}_{page}"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh"),
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"),
        ],
    )

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await callback.message.answer(text, reply_markup=markup)  # type: ignore
    await callback.answer()
    return UNHANDLED


@router.callback_query(F.data.startswith("admin_export_"))
async def export_orders(callback: CallbackQuery, state: FSMContext, order_service: OrderService):
    parts = str(callback.data).split("_")
    page = int(parts[3])
    status_filter = parts[2]

    if status_filter == "pending":
        orders = await order_service.get_pending()
        filename = "pending_orders_"
    else:
        orders = await order_service.get(with_author=True)
        filename = "all_orders_<"
    filename += datetime.now().strftime("%d-%m-%Y") + ">.csv"

    buffer = io.StringIO()
    writer = csv.writer(buffer)

    writer.writerow(["ID", "User ID", "Username", "Phone", "Address", "Order Time", "Status", "Created At"])

    for order in orders:
        username = f"@{order.author.username}" if order.author and order.author.username else ""
        phone = order.author.phone_number if order.author and order.author.phone_number else ""

        order_time = order.time.strftime("%Y-%m-%d %H:%M:%S")
        created_at = order.created_at.strftime("%Y-%m-%d %H:%M:%S") if order.created_at else ""

        writer.writerow(
            [order.id, order.author_id, username, phone, order.address, order_time, order.status.value, created_at],
        )

    csv_data = buffer.getvalue().encode("utf-8")
    file = BufferedInputFile(csv_data, filename=filename)

    await callback.message.answer_document(  # type: ignore
        document=file,
        caption=f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ ({'–æ–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞' if status_filter == 'pending' else '–≤—Å–µ'})",
    )
    await callback.answer("üì§ –§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

    await asyncio.sleep(5)
    await show_orders_page(callback, state, order_service, status_filter, page, False)


@router.callback_query(F.data.startswith("admin_page_"))
async def handle_page_navigation(callback: CallbackQuery, state: FSMContext, order_service: OrderService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
    page = int(str(callback.data).split("_")[2])
    data = await state.get_data()

    await state.update_data(page=page)
    await show_orders_page(callback, state, order_service, data.get("filter_status"), page)


@router.callback_query(F.data == "admin_refresh")
async def refresh_orders(callback: CallbackQuery, state: FSMContext, order_service: OrderService):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"""
    data = await state.get_data()
    page = data.get("page", 0)
    status_filter = data.get("filter_status")

    await show_orders_page(callback, state, order_service, status_filter, page)


@router.callback_query(F.data.startswith("admin_order_"))
async def show_order_details(
    callback: CallbackQuery,
    state: FSMContext,
    order_service: OrderService,
    user_service: UserService,
    order_id: int = -1,
    delete_message: bool = False,
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏"""
    if delete_message:
        await callback.message.delete()  # type: ignore
    if order_id == -1:
        order_id = int(str(callback.data).split("_")[2])

    order = await order_service.get_one(order_id)
    if not order:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    author = await user_service.get_one(order.author_id)

    await state.set_state(AdminStates.order_details)
    await state.update_data(order_id=order_id)

    status_emoji = get_status_emoji(order.status.value)
    date_str = order.time.strftime("%d.%m.%Y %H:%M")
    created_str = order.created_at.strftime("%d.%m.%Y %H:%M")

    author_info = f"ID: {order.author_id}"
    if author:
        if author.username:
            author_info += f" (@{author.username})"
        author_info += f"\nüì± {author.phone_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}"

    text = (
        f"üìã <b>–ó–∞–∫–∞–∑ #{order.id}</b> {status_emoji}\n\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>\n{author_info}\n\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b>\n{order.address}\n\n"
        f"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {date_str}\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {get_status_text(order.status.value)}\n"
        f"üïê <b>–°–æ–∑–¥–∞–Ω:</b> {created_str}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    keyboard = []

    if order.status.value == "pending":
        keyboard.extend(
            [
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"admin_accept_{order_id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{order_id}")],
            ],
        )
    elif order.status.value == "accepted":
        keyboard.extend(
            [
                [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"admin_complete_{order_id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{order_id}")],
            ],
        )
    elif order.status.value in ["completed", "rejected"]:
        keyboard.append([InlineKeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"admin_reopen_{order_id}")])

    """
    keyboard.append([InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"admin_change_status_{order_id}")])
    """

    keyboard.extend(
        [
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="admin_back_to_list")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")],
        ],
    )

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await callback.message.answer(text, reply_markup=markup)  # type: ignore
    await callback.answer()


@router.callback_query(F.data.startswith("admin_accept_"))
async def accept_order(
    callback: CallbackQuery,
    order_service: OrderService,
    user_service: UserService,
    bot: Bot,
    logger: Logger,
    state: FSMContext,
):
    """–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É"""
    order_id = int(str(callback.data).split("_")[2])

    order = await order_service.update_status(order_id, "accepted")

    if order is not None:
        await notify_client(bot, logger, order, user_service, "accepted")

        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")
        await show_order_details(callback, state, order_service, user_service, delete_message=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")


@router.callback_query(F.data.startswith("admin_reject_"))
async def reject_order(
    callback: CallbackQuery,
    order_service: OrderService,
    user_service: UserService,
    bot: Bot,
    logger: Logger,
    state: FSMContext,
):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"""
    order_id = int(str(callback.data).split("_")[2])

    order = await order_service.update_status(order_id, "rejected")

    if order is not None:
        await notify_client(bot, logger, order, user_service, "rejected")

        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        await show_order_details(callback, state, order_service, user_service, delete_message=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")


@router.callback_query(F.data.startswith("admin_complete_"))
async def complete_order(
    callback: CallbackQuery,
    order_service: OrderService,
    user_service: UserService,
    bot: Bot,
    logger: Logger,
    state: FSMContext,
):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞—è–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
    order_id = int(str(callback.data).split("_")[2])

    order = await order_service.update_status(order_id, "completed")

    if order is not None:
        await notify_client(bot, logger, order, user_service, "completed")

        await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        await show_order_details(callback, state, order_service, user_service, delete_message=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")


@router.callback_query(F.data.startswith("admin_reopen_"))
async def reopen_order(
    callback: CallbackQuery,
    order_service: OrderService,
    user_service: UserService,
    bot: Bot,
    logger: Logger,
    state: FSMContext,
):
    """–í–µ—Ä–Ω—É—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É"""
    order_id = int(str(callback.data).split("_")[2])

    order = await order_service.update_status(order_id, "pending")

    if order is not None:
        await notify_client(bot, logger, order, user_service, "reopen")

        await callback.answer("üîÑ –ó–∞–∫–∞–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ —Ä–∞–±–æ—Ç—É")
        await show_order_details(callback, state, order_service, user_service, delete_message=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")


@router.callback_query(F.data.startswith("admin_change_status_"))
async def show_status_change_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    order_id = int(str(callback.data).split("_")[3])

    text = "üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏", callback_data=f"admin_set_status_{order_id}_pending")],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç–∞", callback_data=f"admin_set_status_{order_id}_accepted")],
            [InlineKeyboardButton(text="üéâ –í—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"admin_set_status_{order_id}_completed")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞", callback_data=f"admin_set_status_{order_id}_rejected")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_order_{order_id}")],
        ],
    )

    await callback.message.answer(text, reply_markup=keyboard)  # type: ignore
    await callback.answer()


@router.callback_query(F.data.startswith("admin_set_status_"))
async def set_order_status(
    callback: CallbackQuery,
    order_service: OrderService,
    user_service: UserService,
    bot: Bot,
    logger: Logger,
    state: FSMContext,
):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
    parts = str(callback.data).split("_")
    logger.debug(parts)
    order_id = int(parts[3])
    new_status = parts[4]

    order = await order_service.update_status(order_id, new_status)

    if order is not None:
        if new_status == "rejected":
            await notify_client(bot, logger, order, user_service, "rejected")

        status_text = get_status_text(new_status)
        await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_text}")

        await show_order_details(callback, state, order_service, user_service, order_id=order_id)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")


@router.callback_query(F.data == "admin_back_to_list")
async def back_to_orders_list(callback: CallbackQuery, state: FSMContext, order_service: OrderService):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫"""
    data = await state.get_data()
    page = data.get("page", 0)
    status_filter = data.get("filter_status")

    await state.set_state(AdminStates.viewing_orders)
    await show_orders_page(callback, state, order_service, status_filter, page, delete_message=False)


async def notify_client(bot: Bot, logger: Logger, order: Order, user_service: UserService, status: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    try:

        author = await user_service.get_one(order.author_id)
        if not author:
            return

        date_str = order.time.strftime("%d.%m.%Y %H:%M")

        if status == "accepted":
            text = (
                "‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
                f"üìã <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.address}\n"
                f"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {date_str}\n\n"
                "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
            )
        elif status == "completed":
            text = (
                "üéâ <b>–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                f"üìã <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.address}\n"
                f"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {date_str}\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥!"
            )
        elif status == "rejected":
            text = (
                "‚ùå <b>–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
                f"üìã <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.address}\n"
                f"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {date_str}\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."
            )
        elif status == "reopen":
            text = (
                "üîÑ <b>–í–∞—à –∑–∞–∫–∞–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ —Ä–∞–±–æ—Ç—É</b>\n\n"
                f"üìã <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.address}\n"
                f"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {date_str}\n\n"
                "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
            )
        else:
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="start_order")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")],
            ],
        )

        await bot.send_message(chat_id=author.id, text=text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


def get_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    status_emojis = {"pending": "‚è≥", "accepted": "‚úÖ", "completed": "üéâ", "rejected": "‚ùå", "canceled": "üö´"}
    return status_emojis.get(status, "‚ùì")


def get_status_text(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    status_texts = {
        "pending": "–í –æ–∂–∏–¥–∞–Ω–∏–∏",
        "accepted": "–ü—Ä–∏–Ω—è—Ç",
        "completed": "–í—ã–ø–æ–ª–Ω–µ–Ω",
        "rejected": "–û—Ç–∫–ª–æ–Ω—ë–Ω",
        "canceled": "–û—Ç–º–µ–Ω—ë–Ω",
    }
    return status_texts.get(status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")


@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: CallbackQuery):
    """–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    await callback.answer()
    return UNHANDLED


__all__ = ["router"]
