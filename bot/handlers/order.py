import calendar
from datetime import datetime, timedelta

from aiogram import F, Router
from aiogram.dispatcher.event.bases import UNHANDLED
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    MaybeInaccessibleMessageUnion,
    Message,
)

from keyboards import RequestPhoneNumberKeyboard, ToMainMenuKeyboard, ToMainOrOrderKeyboard
from models import User
from service import OrderService, UserService

router = Router()


class OrderStates(StatesGroup):
    waiting_for_address = State()
    waiting_for_date = State()
    waiting_for_time = State()
    confirmation = State()


async def phone_required(event, current_user: User) -> bool:
    if current_user and not current_user.phone_number:
        # –ü–æ–ª—É—á–∞–µ–º message –∏–ª–∏ callback –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if event:
            await request_phone_number(event)
            return True

    return False


async def request_phone_number(event):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text = (
        "üì± <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º:"
    )

    keyboard = RequestPhoneNumberKeyboard()()

    if isinstance(event, Message):
        await event.answer(text, reply_markup=keyboard)
    elif isinstance(event, CallbackQuery):
        await event.message.answer(text, reply_markup=keyboard)  # type: ignore
        await event.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


@router.message(F.contact)
async def process_contact(message: Message, current_user: User, user_service: UserService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    if message.contact and str(message.contact.user_id) == current_user.id:
        await user_service.update_phone_number(current_user.id, message.contact.phone_number)

        await message.answer(
            "‚úÖ <b>–°–ø–∞—Å–∏–±–æ!</b>\n\n" "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
            reply_markup=ToMainMenuKeyboard()(),
        )
    else:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=RequestPhoneNumberKeyboard()(),
        )


@router.message(F.text == "üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def start_order_hander(message: Message, state: FSMContext, current_user: User):
    if await phone_required(message, current_user):
        return
    await start_order_process(message, state, edit_message=False)


async def start_order_process(message: MaybeInaccessibleMessageUnion, state: FSMContext, edit_message: bool = False):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    await state.set_state(OrderStates.waiting_for_address)

    text = (
        "üìç <b>–®–∞–≥ 1 –∏–∑ 3: –ê–¥—Ä–µ—Å</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –≥–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É–±–æ—Ä–∫—É:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 25</i>"
    )

    keyboard = ToMainMenuKeyboard()()

    if edit_message:
        await message.answer(text, reply_markup=keyboard)
    else:
        await message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data == "back_to_address")
async def back_to_address(callback: CallbackQuery, state: FSMContext):
    await start_order_process(callback.message, state, edit_message=False)  # type: ignore
    await callback.answer()


@router.message(OrderStates.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    address = str(message.text).strip()

    if len(address) < 10:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 25",
        )
        return

    await state.update_data(address=address)
    await state.set_state(OrderStates.waiting_for_date)

    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    today = datetime.now()
    keyboard = create_calendar_keyboard(today.year, today.month)

    await message.answer(
        "üìÖ <b>–®–∞–≥ 2 –∏–∑ 3: –î–∞—Ç–∞</b>\n\n" f"–ê–¥—Ä–µ—Å: <i>{address}</i>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è —É–±–æ—Ä–∫–∏:",
        reply_markup=keyboard,
    )


@router.callback_query(F.data == "back_to_date")
async def back_to_date(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"""
    await state.set_state(OrderStates.waiting_for_date)

    data = await state.get_data()
    today = datetime.now()
    keyboard = create_calendar_keyboard(today.year, today.month)

    await callback.message.answer(  # type: ignore
        "üìÖ <b>–®–∞–≥ 2 –∏–∑ 3: –î–∞—Ç–∞</b>\n\n" f"–ê–¥—Ä–µ—Å: <i>{data['address']}</i>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è —É–±–æ—Ä–∫–∏:",
        reply_markup=keyboard,
    )
    await callback.answer()


@router.callback_query(F.data.startswith("calendar_"))
async def handle_calendar_navigation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
    action = str(callback.data).split("_")[1]
    year = int(str(callback.data).split("_")[2])
    month = int(str(callback.data).split("_")[3])

    if action == "prev":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É
        if month == 1:
            month = 12
            year -= 1
        else:
            month -= 1
    elif action == "next":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É
        if month == 12:
            month = 1
            year += 1
        else:
            month += 1

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é (–Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º —É—Ö–æ–¥–∏—Ç—å –≤ –ø—Ä–æ—à–ª–æ–µ –¥–∞–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞)
    today = datetime.now()
    target_date = datetime(year, month, 1)
    current_month = datetime(today.year, today.month, 1)

    if target_date < current_month:
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü")
        return UNHANDLED

    keyboard = create_calendar_keyboard(year, month)

    data = await state.get_data()
    await callback.message.answer(  # type: ignore
        "üìÖ <b>–®–∞–≥ 2 –∏–∑ 3: –î–∞—Ç–∞</b>\n\n" f"–ê–¥—Ä–µ—Å: <i>{data['address']}</i>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è —É–±–æ—Ä–∫–∏:",
        reply_markup=keyboard,
    )
    await callback.answer()
    return UNHANDLED


def create_calendar_keyboard(year: int, month: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã-–∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞"""
    today = datetime.now()
    keyboard = []

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    month_names = {
        1: "–Ø–Ω–≤–∞—Ä—å",
        2: "–§–µ–≤—Ä–∞–ª—å",
        3: "–ú–∞—Ä—Ç",
        4: "–ê–ø—Ä–µ–ª—å",
        5: "–ú–∞–π",
        6: "–ò—é–Ω—å",
        7: "–ò—é–ª—å",
        8: "–ê–≤–≥—É—Å—Ç",
        9: "–°–µ–Ω—Ç—è–±—Ä—å",
        10: "–û–∫—Ç—è–±—Ä—å",
        11: "–ù–æ—è–±—Ä—å",
        12: "–î–µ–∫–∞–±—Ä—å",
    }
    month_year = f"{month_names[month]} {year}"

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    nav_row = []

    # –ö–Ω–æ–ø–∫–∞ "–ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü" (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)
    current_month_date = datetime(today.year, today.month, 1)
    target_month_date = datetime(year, month, 1)

    if target_month_date > current_month_date:
        nav_row.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"calendar_prev_{year}_{month}"))
    else:
        nav_row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    nav_row.append(InlineKeyboardButton(text=f"üìÖ {month_year}", callback_data="ignore"))

    # –ö–Ω–æ–ø–∫–∞ "—Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü" (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 6 –º–µ—Å—è—Ü–∞–º–∏)
    max_date = current_month_date + timedelta(days=180)
    if target_month_date < max_date:
        nav_row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"calendar_next_{year}_{month}"))
    else:
        nav_row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    keyboard.append(nav_row)

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([InlineKeyboardButton(text=day, callback_data="ignore") for day in weekdays])

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
    cal = calendar.monthcalendar(year, month)

    for week in cal:
        week_buttons = []
        for day in week:
            if day == 0:
                week_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                date_obj = datetime(year, month, day)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
                if date_obj.date() > today.date() and date_obj.date() <= today.date() + timedelta(days=180):
                    week_buttons.append(
                        InlineKeyboardButton(text=str(day), callback_data=f"date_{date_obj.strftime('%Y-%m-%d')}"),
                    )
                else:
                    week_buttons.append(InlineKeyboardButton(text="‚ùå", callback_data="ignore"))
        keyboard.append(week_buttons)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –æ—Ç–º–µ–Ω—ã
    keyboard.append(
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_address"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order"),
        ],
    )

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(F.data.startswith("date_"))
async def process_date_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    date_str = str(callback.data).split("_")[1]
    selected_date = datetime.strptime(date_str, "%Y-%m-%d")

    await state.update_data(date=date_str, date_formatted=selected_date.strftime("%d.%m.%Y"))
    await state.set_state(OrderStates.waiting_for_time)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    keyboard = create_time_keyboard()

    data = await state.get_data()
    await callback.message.answer(  # type: ignore
        "üïê <b>–®–∞–≥ 3 –∏–∑ 3: –í—Ä–µ–º—è</b>\n\n"
        f"–ê–¥—Ä–µ—Å: <i>{data['address']}</i>\n"
        f"–î–∞—Ç–∞: <i>{data['date_formatted']}</i>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É–±–æ—Ä–∫–∏:",
        reply_markup=keyboard,
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_time")
async def back_to_time(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏"""
    await state.set_state(OrderStates.waiting_for_time)

    data = await state.get_data()
    keyboard = create_time_keyboard()

    await callback.message.answer(  # type: ignore
        "üïê <b>–®–∞–≥ 3 –∏–∑ 3: –í—Ä–µ–º—è</b>\n\n"
        f"–ê–¥—Ä–µ—Å: <i>{data['address']}</i>\n"
        f"–î–∞—Ç–∞: <i>{data['date_formatted']}</i>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É–±–æ—Ä–∫–∏:",
        reply_markup=keyboard,
    )
    await callback.answer()


def create_time_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    times = [
        "08:00",
        "09:00",
        "10:00",
        "11:00",
        "12:00",
        "13:00",
        "14:00",
        "15:00",
        "16:00",
        "17:00",
        "18:00",
        "19:00",
        "20:00",
        "21:00",
        "22:00",
    ]

    keyboard = []
    row = []
    for i, time in enumerate(times):
        row.append(InlineKeyboardButton(text=time, callback_data=f"time_{time}"))
        if (i + 1) % 3 == 0:  # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            keyboard.append(row)
            row = []

    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        keyboard.append(row)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append(
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_date"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order"),
        ],
    )

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(F.data.startswith("time_"))
async def process_time_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    time_str = str(callback.data).split("_")[1]
    await state.update_data(time=time_str)
    await state.set_state(OrderStates.confirmation)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    data = await state.get_data()

    confirmation_text = (
        "‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {data['address']}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {data['date_formatted']}\n"
        f"üïê <b>–í—Ä–µ–º—è:</b> {time_str}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="back_to_time")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")],
        ],
    )

    await callback.message.answer(confirmation_text, reply_markup=keyboard)  # type: ignore
    await callback.answer()


@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext, current_user: User, order_service: OrderService):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    data = await state.get_data()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    date_obj = datetime.strptime(data["date"] + " " + data["time"], "%Y-%m-%d %H:%M")
    order_id = await order_service.create(
        author_id=current_user.id,
        address=data["address"],
        time=date_obj,
    )

    if order_id == -1:
        error_text = (
            "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n" "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        await callback.message.answer(error_text, reply_markup=ToMainOrOrderKeyboard()())  # type: ignore
        return

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success_text = (
        "üéâ <b>–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.</b>\n\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {data['address']}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {data['date_formatted']}\n"
        f"üïê <b>–í—Ä–µ–º—è:</b> {data['time']}\n\n"
        "‚úÖ –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_this_order")],
        ],
    )

    await callback.message.answer(success_text, reply_markup=keyboard)  # type: ignore

    await state.clear()
    await callback.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")


@router.callback_query(F.data == "cancel_order")
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    await state.clear()

    text = (
        "‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    )

    keyboard = ToMainOrOrderKeyboard()()

    await callback.message.answer(text, reply_markup=keyboard)  # type: ignore
    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")


@router.callback_query(F.data == "cancel_this_order")
async def cancel_existing_order(callback: CallbackQuery, current_user: User, order_service: OrderService):
    """–û—Ç–º–µ–Ω–∞ —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    orders = await order_service.get_by_author(current_user.id)
    if not orders:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."
        keyboard = ToMainMenuKeyboard()()
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=keyboard)  # type: ignore
        await callback.answer()
        return

    last_order = orders[-1]
    await order_service.update_status(last_order.id, "canceled")

    text = "‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n" "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω."

    keyboard = ToMainOrOrderKeyboard()()

    await callback.message.answer(text, reply_markup=keyboard)  # type: ignore
    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")


@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: CallbackQuery):
    """–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    await callback.answer()
    return UNHANDLED


__all__ = ["router", "start_order_hander"]
